type Query {
  tickets(eventId: ID!): [Ticket!]
  ticket(id: ID!): Ticket
}

type Mutation {
  createTicket(input: CreateTicketInput): Ticket!
  updateTicket(input: UpdateTicketInput): Ticket!
  deleteTicket(id: ID!): TicketDeletedType!
  # duplicateTicket(input: DuplicateTicketInput!): Ticket!
}

type Ticket {
  id: ID!
  event: Event!
  name: String!
  description: String
  available: Int!
  amount: Int
  lot: TicketLot!
  quantityPerPurchase: TicketQuantityPerPurchase!
  category: TicketCategory!
  status: TicketStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
}

type TicketLot {
  initial: DateTime!
  end: DateTime!
}

# O max n√£o pode ser maior que available
type TicketQuantityPerPurchase {
  min: Int!
  max: Int!
}

type TicketDeletedType {
  id: ID!
  status: TicketStatus!
  deletedAt: DateTime!
}

enum TicketCategory {
  FREE
  PAID
}

enum TicketStatus {
  ACTIVE
  DISABLED
}

input CreateTicketInput {
  event: ObjectId!
  name: String!
  description: String
  available: Int!
  amount: Int
  lot: TicketLotInput!
  quantityPerPurchase: TicketQuantityPerPurchaseInput
  # Default Paid
  category: TicketCategory
}

input UpdateTicketInput {
  id: ObjectId!
  name: String
  description: String
  available: Int
  lot: TicketLotInput
  quantityPerPurchase: TicketQuantityPerPurchaseInput
}

input DuplicateTicketInput {
  id: ObjectId!
  available: Int
  amount: Int
  lot: TicketLotInput
  quantityPerPurchase: TicketQuantityPerPurchaseInput
}

input TicketQuantityPerPurchaseInput {
  # Default 1
  min: Int!
  # Default 1
  max: Int!
}

input TicketLotInput {
  # Min now
  initial: DateTime!
  # Min initial
  end: DateTime!
}
